{"version":3,"sources":["component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","todos","inputVal","hadnleInputAddChange","handleAddTodo","inputSearchVal","handleInputSearchChange","handleSearchTodo","handleDeleteTodo","className","placeholder","value","onChange","onSubmit","onClick","filter","name","toUpperCase","includes","map","todo","id","key","App","todosFromDatabase","useState","setInputVal","setInputSearchVal","setTodos","searchTodos","setSearchTodos","e","target","preventDefault","newID","length","newTodos","search","todoId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OA6CeA,MA5Cf,SAAkBC,GAAQ,IAEtBC,EAQED,EARFC,MACAC,EAOEF,EAPFE,SACAC,EAMEH,EANFG,qBACAC,EAKEJ,EALFI,cACAC,EAIEL,EAJFK,eACAC,EAGEN,EAHFM,wBACAC,EAEEP,EAFFO,iBACAC,EACER,EADFQ,iBAEF,OACE,6BACE,0BAAMC,UAAU,aACd,2BACEC,YAAY,uCACZC,MAAOT,EACPU,SAAUT,IAEZ,4BAAQU,SAAUN,EAAkBO,QAASV,GAA7C,QAEF,0BAAMK,UAAU,aACd,2BACEC,YAAY,eACZC,MAAON,EACPO,SAAUN,IAEZ,4BAAQO,SAAUN,EAAkBO,QAASP,GAA7C,WAEDN,EACEc,QAAO,qBAAGC,KACJC,cAAcC,SAASb,EAAeY,kBAE5CE,KAAI,SAACC,GAAD,OACH,yBAAKX,UAAU,YAAYY,GAAID,EAAKC,GAAIC,IAAKF,EAAKC,IAChD,yBAAKZ,UAAU,SAASW,EAAKJ,MAC7B,yBAAKP,UAAU,cACb,4BAAQA,UAAU,cAAcK,QAAS,kBAAMN,EAAiBY,EAAKC,MAArE,mBCgCCE,MAlEf,WACE,IAAMC,EAAoB,CACxB,CAAEH,GAAI,EAAGL,KAAM,kCACf,CAAEK,GAAI,EAAGL,KAAM,wCACf,CAAEK,GAAI,EAAGL,KAAM,yCAJJ,EAMmBS,mBAAS,IAN5B,mBAMNvB,EANM,KAMIwB,EANJ,OAO+BD,mBAAS,IAPxC,mBAONpB,EAPM,KAOUsB,EAPV,OAQaF,mBAASD,GARtB,mBAQNvB,EARM,KAQC2B,EARD,OASyBH,mBAASD,GATlC,mBASNK,EATM,KASOC,EATP,KA8Cb,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,kBAAC,EAAD,CACER,MAAOA,EACPC,SAAUA,EACVC,qBA3CmB,SAAC4B,GAC5BL,EAAYK,EAAEC,OAAOrB,QA2CbP,cAzCY,SAAC2B,GAErB,GADAA,EAAEE,iBACe,KAAb/B,GAAuC,kBAAbA,EAC5B,OAAO,EAET,IAAMgC,EAAyB,IAAjBjC,EAAMkC,OAAe,EAAIlC,EAAMA,EAAMkC,OAAS,GAAGd,GAAK,EAC9De,EAAQ,sBAAOnC,GAAP,CAAc,CAAEoB,GAAIa,EAAOlB,KAAMd,KAC/CwB,EAAY,IACZE,EAASQ,GACTN,EAAeM,IAiCP/B,eAAgBA,EAChBC,wBA1BsB,SAACyB,GAC/BJ,EAAkBI,EAAEC,OAAOrB,QA0BnBJ,iBAvBV,SAA0BwB,GAIxB,GAHAA,EAAEE,iBAEFL,EAASC,GACc,KAAnBxB,GAAmD,kBAAnBA,EAA6B,CAC/D,IAAMgC,EAASpC,EAAMc,QAAO,qBAAGC,KACxBC,cAAcC,SAASb,EAAeY,kBAE7CW,EAASS,KAgBH7B,iBAjCV,SAA0B8B,GACxB,IAAMF,EAAWnC,EAAMc,QAAO,qBAAGM,KAAgBiB,KACjDV,EAASQ,GACTN,EAAeM,UCpBCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f3fc88e6.chunk.js","sourcesContent":["import React from \"react\";\nfunction TodoList(props) {\n  const {\n    todos,\n    inputVal,\n    hadnleInputAddChange,\n    handleAddTodo,\n    inputSearchVal,\n    handleInputSearchChange,\n    handleSearchTodo,\n    handleDeleteTodo,\n  } = props;\n  return (\n    <div>\n      <form className=\"dInputAdd\">\n        <input\n          placeholder=\"新增代辦事項\"\n          value={inputVal}\n          onChange={hadnleInputAddChange}\n        />\n        <button onSubmit={handleSearchTodo} onClick={handleAddTodo}>Add</button>\n      </form>\n      <form className=\"dInputAdd\">\n        <input\n          placeholder=\"搜尋\"\n          value={inputSearchVal}\n          onChange={handleInputSearchChange}\n        />\n        <button onSubmit={handleSearchTodo} onClick={handleSearchTodo}>search</button>\n      </form>\n      {todos\n        .filter(({ name }) =>\n          name.toUpperCase().includes(inputSearchVal.toUpperCase())\n        )\n        .map((todo) => (\n          <div className=\"dTodoList\" id={todo.id} key={todo.id}>\n            <div className=\"dList\">{todo.name}</div>\n            <div className=\"dCompelete\">\n              <button className=\"btnComplete\" onClick={() => handleDeleteTodo(todo.id)}>Complete</button>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n}\nexport default TodoList;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./component/TodoList.js\";\n\nfunction App() {\n  const todosFromDatabase = [\n    { id: 1, name: \"寄信給客戶\" },\n    { id: 2, name: \"幫媽媽買東西\" },\n    { id: 3, name: \"下週五要聚餐\" },\n  ];\n  const [inputVal, setInputVal] = useState(\"\");\n  const [inputSearchVal, setInputSearchVal] = useState(\"\");\n  const [todos, setTodos] = useState(todosFromDatabase);\n  const [searchTodos, setSearchTodos] = useState(todosFromDatabase);\n  const hadnleInputAddChange = (e) => {\n    setInputVal(e.target.value);\n  };\n  const handleAddTodo = (e) => {\n    e.preventDefault();\n    if (inputVal === \"\" || typeof inputVal !== \"string\") {\n      return false;\n    }\n    const newID = todos.length === 0 ? 0 : todos[todos.length - 1].id + 1;\n    const newTodos = [...todos, { id: newID, name: inputVal }];\n    setInputVal(\"\");\n    setTodos(newTodos);\n    setSearchTodos(newTodos);\n  };\n\n  function handleDeleteTodo(todoId) {\n    const newTodos = todos.filter(({ id }) => id !== todoId);\n    setTodos(newTodos);\n    setSearchTodos(newTodos);\n  }\n  const handleInputSearchChange = (e) => {\n    setInputSearchVal(e.target.value);\n  };\n\n  function handleSearchTodo(e) {\n    e.preventDefault();\n\n    setTodos(searchTodos);\n    if (inputSearchVal !== \"\" && typeof inputSearchVal === \"string\") {\n      const search = todos.filter(({ name }) =>\n        name.toUpperCase().includes(inputSearchVal.toUpperCase())\n      );\n      setTodos(search);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TodoList\n            todos={todos}\n            inputVal={inputVal}\n            hadnleInputAddChange={hadnleInputAddChange}\n            handleAddTodo={handleAddTodo}\n            inputSearchVal={inputSearchVal}\n            handleInputSearchChange={handleInputSearchChange}\n            handleSearchTodo={handleSearchTodo}\n            handleDeleteTodo={handleDeleteTodo}\n          />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}